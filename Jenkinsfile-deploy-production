#!groovy

SELECTED_DEPLOYMENT_OPTION = "latest"
SPECIFIC_VERSION = ""

stage ('Approve deploy?') {
    timeout(time: 5, unit: 'MINUTES') {
        SELECTED_DEPLOYMENT_OPTION =
        input message: 'Deploy to production?', parameters: [[$class: 'ChoiceParameterDefinition',
                                                              choices: 'latest\nspecific',
                                                              description: 'The latest or a specific manually entered version',
                                                              name: '']]
        if (SELECTED_DEPLOYMENT_OPTION == "specific") {
            SPECIFIC_VERSION =
                    input message: 'Enter version?', parameters: [[$class: 'StringParameterDefinition',
                                                                   defaultValue: '',
                                                                   description: 'Specific version to deploy',
                                                                   name: '']]
        }
    }
}

// one at a time!
lock('lock-deploy-production') {
    stage('Deploy production') {
        node {
            timeout(time: 5, unit: 'MINUTES') {
                checkout scm

                stash excludes: 'build/', includes: '**', name: 'source'

                if (SELECTED_DEPLOYMENT_OPTION == "latest") {
                    sh '''TAG=`git describe --abbrev=0`
              ./gradlew deployToProduction -PrepoId=releases -PartifactVersion=$TAG'''
                } else if (SELECTED_DEPLOYMENT_OPTION == "specific") {
                    echo "Deploying specific version: ${SPECIFIC_VERSION}"
                    sh './gradlew deployToProduction -PrepoId=releases -PartifactVersion=' + SPECIFIC_VERSION
                } else {
                    throw new RuntimeException("Invalid deployment option selected: ${SELECTED_DEPLOYMENT_OPTION}")
                }
            }
        }
    }
}

stage ('Health check') {
    timeout(time: 5, unit: 'MINUTES') {
        parallel 'prodServer1': {
            node {
                retry(5) {
                    unstash 'source'
                    sh 'chmod 755 gradlew'

                    sh 'SPRING_PROFILES_ACTIVE=online,production,prodServer1 ./gradlew smokeTest'
                }
            }
        }, 'prodServer2': {
            node {
                retry(5) {
                    unstash 'source'
                    sh 'chmod 755 gradlew'

                    sh 'SPRING_PROFILES_ACTIVE=online,production,prodServer2 ./gradlew smokeTest'
                }
            }
        }
    }
}
